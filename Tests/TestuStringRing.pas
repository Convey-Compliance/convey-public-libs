unit TestuStringRing;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, uStringRing;

type
  // Test methods for class TStringRing
  
  TestTStringRing = class(TTestCase)
  private
    FStringRing: TStringRing;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestNextString;
    procedure TestNextStringWrapAround;
  end;

implementation

procedure TestTStringRing.SetUp;
begin
  FStringRing := TStringRing.Create(4);
end;

procedure TestTStringRing.TearDown;
begin
  FStringRing.Free;
  FStringRing := nil;
end;

procedure TestTStringRing.TestNextString;
var
  ReturnValue: string;
begin
  ReturnValue := FStringRing.NextString('hello');
  CheckEqualsString('hello', ReturnValue, 'Strings don''t match');

  ReturnValue := FStringRing.NextString('hello2');
  CheckEqualsString('hello2', ReturnValue, 'Strings don''t match');

  ReturnValue := FStringRing.NextString('hello3');
  CheckEqualsString('hello3', ReturnValue, 'Strings don''t match');

  ReturnValue := FStringRing.NextString('hello4');
  CheckEqualsString('hello4', ReturnValue, 'Strings don''t match');

  // Here we wrap
  ReturnValue := FStringRing.NextString('hello5');
  CheckEqualsString('hello5', ReturnValue, 'Strings don''t match');
end;

procedure TestTStringRing.TestNextStringWrapAround;
var
  ReturnValue: string;
begin
  ReturnValue := FStringRing.NextString('hello');
  CheckEqualsString('hello', ReturnValue, 'Strings don''t match');
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTStringRing.Suite);
end.

